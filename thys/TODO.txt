- Implement a simplified RoughSpec in Isabelle

- Code currently lives in lemma-exploration/template-eval/RoughSpecify.thy

What we want:
We take as input
   - a string representation of a template (as generated by llm model)
   - a list of constants (functions/function names)
We fill in the holes in the templates using the given constants, such that what comes out is a correctly typed term.

We output: a lemma conjecture,
which we then want to test using tools built in to isabelle (quickcheck and/or nitpick) like we do in https://github.com/efirst/lemma-exploration/blob/main/lemma-eval/LemmaChecker.thy.
- our final output would be the conjectures formed using the given templates and function names that pass counter-example checks.


We want a function that
- takes as input a template (term) and some function symbols (Const terms)
- instantiates the template with those functions in a type-correct way (replaces the holes in the template with function symbols)
- (this is already implemented - can hook things up once template instantiation is working) tests the resulting lemmas (using quickcheck/nitpick)

The Haskell code for RoughSpec template instantiation is in
https://github.com/solrun/quickspec/tree/master/src/QuickSpec/Internal/RoughSpec/PropGen.hs
Note that here we import
 QuickSpec.Internal.Explore.Polymorphic as Polymorphic
and use that to do some type magic to make everything work smoothly
In Isabelle we don't have a library like this.

https://github.com/TheoryMine/IsaPlanner has a lot of (pretty old) Isabelle code for doing all kinds of term and type manipulation and term instantiation, thousands of lines of code with all kinds of library functions.
Can we use an instantiation environment like what's defined in
https://github.com/TheoryMine/IsaPlanner/blob/master/src/libs/term/instenv.ML
and do a simplified version of
'inst_hole_with_const', which is defined in
https://github.com/TheoryMine/IsaPlanner/blob/master/src/synthesis/naive_synth.ML ?
Many of the things here (like the synthesis constraints) would not be relevant for us.
I think we can skip a lot of the steps they take (like they have special term datatype Trm, don't think we need that).





Some potential resources:

Link to RoughSpec paper:
https://www.cse.chalmers.se/~slrn/papers/roughspec.pdf

Yutaka Nagashima's Abduction Prover (https://unitedreasoning.wordpress.com/2023/10/05/993/) in Isabelle has some template based-conjecturing built in, it might be useful to have a look at his codebase (https://github.com/data61/PSL/tree/master/Abduction)

Hipster codebase/paper
Codebase: https://github.com/moajohansson/IsaHipster/
          (active branch compatible with Isabelle2024 here: https://github.com/moajohansson/IsaHipster/tree/Isabelle2024)
Paper: https://www.cse.chalmers.se/~jomoa/papers/Hipster-cicm-2014.pdf
Hipster takes a list of constants (function names) and conjectures lemmas about them using QuickSpec (implemented in haskell) via a back-and-forth translation pipeline.
